version: "3.9" # Specify Docker Compose version

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:15 # Use PostgreSQL version 15 (stable and recent as of March 2025)
    container_name: gin_gorm_db
    environment:
      POSTGRES_USER: admin # Database username
      POSTGRES_PASSWORD: password # Database password (change in production!)
      POSTGRES_DB: gin_gorm_db # Default database name
    ports:
      - "5432:5432" # Map host port 5432 to container port 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data # Persist data in a named volume
    restart: unless-stopped # Restart policy for resilience
    healthcheck: # Ensure the DB is ready before dependent services start
      test: ["CMD-SHELL", "pg_isready -U admin -d gin_gorm_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Example Task Service (uncomment and adjust as needed)
  # task-service:
  #   build:
  #     context: ./task-service  # Path to your Task Service directory with Dockerfile
  #     dockerfile: Dockerfile
  #   container_name: task_service
  #   ports:
  #     - "8080:8080"  # Map Task Service port
  #   environment:
  #     DB_HOST: postgres      # Link to Postgres service
  #     DB_PORT: 5432
  #     DB_USER: admin
  #     DB_PASSWORD: password
  #     DB_NAME: taskdb
  #   depends_on:
  #     postgres:
  #       condition: service_healthy  # Wait for Postgres to be ready
  #   restart: unless-stopped

  # Example User Service (uncomment and adjust as needed)
  # user-service:
  #   build:
  #     context: ./user-service  # Path to your User Service directory with Dockerfile
  #     dockerfile: Dockerfile
  #   container_name: user_service
  #   ports:
  #     - "8081:8081"  # Map User Service port
  #   environment:
  #     DB_HOST: postgres      # Link to Postgres service
  #     DB_PORT: 5432
  #     DB_USER: admin
  #     DB_PASSWORD: password
  #     DB_NAME: taskdb
  #   depends_on:
  #     postgres:
  #       condition: service_healthy  # Wait for Postgres to be ready
  #   restart: unless-stopped

# Define named volumes for data persistence
volumes:
  postgres_data:
